// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// isDeleted                Boolean       @default(false)
// createdById     Int?
// createdAt       DateTime? @db.Timestamp(6)
// modifiedById    Int?
// modifiedAt      DateTime? @db.Timestamp(6)

model Person {
  id           Int           @id @default(autoincrement())
  name         String
  code         String?
  tripRequests TripRequest[]
  tripTickets  TripTicket[]
}

model Status {
  id                  Int           @id @default(autoincrement())
  belongsToEntityType String?
  name                String
  isActive            Boolean
  // tripRequest         TripRequest[]
  // tripTicket          TripTicket[]
  trips               Trip[]
  tripRequests        TripRequest[]
  // cargoTickets        CargoTicket[]
  tripTickets         TripTicket[]
}

model Location {
  id             Int       @id @default(autoincrement())
  name           String
  coordinateX    Decimal?  @db.Decimal
  coordinateY    Decimal?  @db.Decimal
  addressDetails String?
  isDeleted      Boolean   @default(false)
  createdById    Int?
  createdAt      DateTime? @default(now()) @db.Timestamp(6)
  modifiedById   Int?
  modifiedAt     DateTime? @default(now()) @db.Timestamp(6)

  trip_FromLocation        Trip[]        @relation("Trip_FromLocationIdToLocation")
  trip_ToLocation          Trip[]        @relation("Trip_ToLocationIdToLocation")
  tripRequest_FromLocation TripRequest[] @relation("TripRequest_FromLocationIdToLocation")
  tripRequest_ToLocation   TripRequest[] @relation("TripRequest_ToLocationIdToLocation")
}

model Trip {
  id                           Int      @id @default(autoincrement())
  tripRequestId                Int?
  fromLocationId               Int
  toLocationId                 Int
  departureTime                DateTime @db.Timestamp(6)
  arrivalTime                  DateTime @db.Timestamp(6)
  peopleCapacity               Int      @default(0)
  cargoWeightCapacity          Float    @default(0)
  peopleCapacityRemaining      Int      @default(0)
  cargoWeightCapacityRemaining Float    @default(0)
  statusId                     Int

  // cargoVolumeCapacity Int          @default(0)
  // cargoVolume         Float        @default(0)
  createdById  Int
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  modifiedById Int
  modifiedAt   DateTime @default(now()) @db.Timestamp(6)

  fromLocation Location     @relation("Trip_FromLocationIdToLocation", fields: [fromLocationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  toLocation   Location     @relation("Trip_ToLocationIdToLocation", fields: [toLocationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tripTickets  TripTicket[] @relation("TripTicket_FromTripIdToTrip")
  status       Status       @relation(fields: [statusId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // createdBy           Person?      @relation("Trip_CreatedByIdToPerson", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // modifiedBy          Person?      @relation("Trip_ModifiedByIdToPerson", fields: [modifiedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // tripRequest         TripRequest? @relation(fields: [tripRequestId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // tripTickets         TripTicket[]

  // @@index([tripRequestId], map: "fki_FK_Trip_TripRequestId_TripRequest_Id")
}

model TripTicket {
  id                Int      @id @default(autoincrement())
  tripId            Int
  dependentTicketId Int?
  personId          Int?
  cargoId           Int?
  remarks           String?
  statusId          Int
  createdById       Int
  createdAt         DateTime @default(now()) @db.Timestamp(6)
  modifiedById      Int
  modifiedAt        DateTime @default(now()) @db.Timestamp(6)

  trip   Trip    @relation("TripTicket_FromTripIdToTrip", fields: [tripId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cargo  Cargo?  @relation(fields: [cargoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  person Person? @relation(fields: [personId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  status Status  @relation(fields: [statusId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Cargo {
  id          Int           @id @default(autoincrement())
  description String?
  // cargoDimensionCategoryId Int
  // cargoDimensions          String?
  cargoWeight Float
  // cargoDimensionCategory   CargoDimensionCategory @relation(fields: [cargoDimensionCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tripRequest TripRequest[]
  // tripTicket               TripTicket[]
  tripTickets TripTicket[]
}

model TripRequest {
  id             Int       @id @default(autoincrement())
  fromLocationId Int
  toLocationId   Int
  departEarliest DateTime? @db.Timestamp(6)
  departLatest   DateTime? @db.Timestamp(6)
  arriveEarliest DateTime? @db.Timestamp(6)
  arriveLatest   DateTime? @db.Timestamp(6)
  remarks        String?
  statusId       Int
  createdById    Int
  createdAt      DateTime  @default(now()) @db.Timestamp(6)
  modifiedById   Int
  modifiedAt     DateTime  @default(now()) @db.Timestamp(6)

  toLocation   Location @relation("TripRequest_ToLocationIdToLocation", fields: [toLocationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  fromLocation Location @relation("TripRequest_FromLocationIdToLocation", fields: [fromLocationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  status       Status   @relation(fields: [statusId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  personList Person[]
  cargoList  Cargo[]
  // trip           Trip[]
  // createdBy      Person?   @relation("TripRequest_FromCreatedByIdToOPerson", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // modifiedBy     Person?   @relation("TripRequest_FromModifiedByIdToOPerson", fields: [modifiedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
